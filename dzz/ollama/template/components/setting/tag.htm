<el-text type="info" tag="p" class="tipTxt" size="small">{lang prompt_tip}</el-text>
<div class="tipTxt" style="display:inline-block;cursor: pointer;vertical-align: text-top"  @click="fold()" title="{lang fold_tips}">
    <template v-if="!isDragging">
        <el-icon><Reading /></el-icon>  <el-text>{lang fold_tip_2}</el-text>
    </template>
    <template v-else>
            <el-icon><Notebook /></el-icon>  <el-text>{lang fold_tip_1}</el-text>
    </template>
</div>
<ul class="prompt-ul">
    <li class="prompt-li" v-for="(item,key) in PromptData" v-loading="item.loading" :key="item.id">
        <div class="dzz-move">
            <el-icon><Rank /></el-icon>
        </div>
        <div class="input-box">
            <el-form :model="tagForm" :rules="tagrules" ref="tagruleForm" label-width="120px" label-suffix="：">
                <el-form-item label="{lang name}">
                    <el-input style="width: 100%;" v-model.trim="item.name"></el-input>
                </el-form-item>

                <template v-for="(item1,key1) in item.prompts">
                    <el-form-item :label="key1==0?'{lang model0}':'{lang model1}'">

                        <el-select v-model="item1.model">
                            <el-option v-if="key1>0" label="{lang none}" value=""></el-option>
                            <el-option v-for="item2 in models" :key="item2" :label="item2" :value="item2"></el-option>
                        </el-select>
                        <template v-if="key1==0" >
                            <el-text type="info" class="tipTxt" size="small" style="margin-bottom:0">{lang model0_tips}</el-text>
                        </template>
                        <template v-else>
                            <el-text type="info" class="tipTxt" size="small" style="margin-bottom:0">{lang model1_tips}</el-text>
                        </template>

                    </el-form-item>
                    <el-form-item :label="key1==0?'{lang prompt0}':'{lang prompt1}'">
                        <el-input
                                style="width: 100%;"
                                type="textarea"
                                :autosize="{ minRows: 3}"
                                v-model.trim="item1.prompt"></el-input>
                    </el-form-item>

                </template>
            </el-form>
        </div>
        <div class="operation">
            <el-switch
                v-model="item.status"
                :active-value="1"
                :inactive-value="0"
                @change="PromptDefault(key)"
            ></el-switch>
            <el-button type="primary" size="small" style="margin-left: 12px;" @click="PromptSave(key)">{lang save}</el-button>
            <template v-if="item.type == 'new'">
                <el-button type="danger" size="small" @click="PromptDelete(key)">{lang delete}</el-button>
            </template>
            <template v-else>
                <el-popconfirm title="{lang delete_confirm}" width="300" @confirm="PromptDelete(key)">
                    <template #reference>
                        <el-button size="small" type="danger">{lang delete}</el-button>
                    </template>
                  </el-popconfirm>
            </template>
            
        </div>
    </li>

</ul>
<div class="Prompt-add">
    <el-button type="primary" size="large"  @click="PromptAdd()">
        <el-icon><Plus /></el-icon>
        {lang add}
    </el-button>
</div>
<script>
    const PromptOtherMixin = {
        data(){
            return {
                PromptData:[],

                isDragging:false
            }
        },
        methods: {
            async PromptAdd(data){
                let self=this;
                if(!data){
                    let cate = 0;
                    switch (this.leftactive) {
                        case 'tag':
                            cate = 1;
                        break;
                        case 'desc':
                            cate = 2;
                        break;
                        case 'filename':
                            cate = 0;
                        break;
                    }
                    this.PromptData.push({
                        id:new Date().getTime(),
                        cate:cate,
                        name:'',
                        prompt:'',
                        prompts:[
                            {
                                model:'',
                                prompt:''
                            },
                            {
                                model:'',
                                prompt:''
                            }
                        ],
                        isdefault:0,
                        status:1,
                        type:'new',
                        loading:false
                    })
                    return false;
                }
                let params = {
                    name:data.name,
                    prompts:data.prompts,
                    cate:data.cate,
                    status:1
                };
                data.loading = true;
                const {data: res} = await axios.post('{MOD_URL}&op=setting&do=addPrompt',params); 
                data.loading = false;
                if(res.success){
                    data.id = res.id;
                    data.type = '';
                }else{
                    self.$message({
                        type:'error',
                        message:res.error || '{lang modification_error}'
                    })
                }
            },
            async PromptSave(index){

                let self = this;
                let curr = this.PromptData[index];
                if(curr.type == 'new'){
                    this.PromptAdd(curr);
                    return false;
                }
                let params = {
                    id:curr.id,
                    name:curr.name,
                    prompts:curr.prompts,
                };
                const {data: res} = await axios.post('{MOD_URL}&op=setting&do=editPrompt',params); 
                if(res.success){
                    self.$message({
                        type:'success',
                        message:'{lang modification_success}'
                    })
                }else{
                    self.$message({
                        type:'error',
                        message:res.error || '{lang modification_error}'
                    })
                }
            },
            PromptSortable(){//排序
				var _this = this;
				var tbody = document.querySelector('.prompt-ul');
				Sortable.create(tbody, {
					draggable: ".prompt-li",
                    handle: ".dzz-move",
                    filter: ".Prompt-add",
                    animation: 500,

					onUpdate ({ newIndex, oldIndex }) {//列表内元素顺序更新的时候触发
						var currRow = _this.PromptData.splice(oldIndex, 1)[0];
						_this.PromptData.splice(newIndex, 0, currRow);
                        _this.PromptSortableSave();
					}
				});
			},
            async PromptSortableSave(){
                let ids = [];
                this.PromptData.forEach(function(item,index){
                    ids.push(item.id);
                })
                const {data: res} = await axios.post('{MOD_URL}&op=setting&do=sortPrompt',{
                    ids:ids.join(',')
                }); 
            },
            async PromptDelete(index){
                let self = this;
                let curr = this.PromptData[index];
                if(curr.type == 'new'){
                    this.PromptData.splice(index,1);
                    return false;
                }
                let params = {
                    id:curr.id,
                }
                curr.loading = true;
                const {data: res} = await axios.post('{MOD_URL}&op=setting&do=delPrompt',params); 
                if(res.success){
                    this.PromptData.splice(index,1);
                }else{
                    self.$message({
                        type:'error',
                        message:res.error || '{lang delete_unsuccess}'
                    })
                }
            },
            async PromptGet(){
                let self = this;
                let cate = 0;
                switch (this.leftactive) {
                    case 'tag':
                        cate = 1;
                    break;
                    case 'desc':
                        cate = 2;
                    break;
                    case 'filename':
                        cate = 0;
                    break;
                }
                this.PromptData = [];
                const {data: res} = await axios.post('{MOD_URL}&op=setting&do=getPromptByCate',{
                    cate:cate
                }); 
                if(res.success){
                    if(res.data && res.data.length){
                        for (let index = 0; index < res.data.length; index++) {
                            const element = res.data[index];
                            this.PromptData.push({
                                id:element.id,
                                cate:element.cate,
                                name:element.name,

                                prompts:element.prompts,
                                isdefault:parseInt(element.isdefault),
                                status:parseInt(element.status),
                                type:'',
                                loading:false
                            })
                        }
                    }
                }
                
            },
            async PromptDefault(index){
                let curr = this.PromptData[index];
                const {data: res} = await axios.post('{MOD_URL}&op=setting&do=setStatus',{
                    id:curr.id,
                    status:curr.status
                }); 
                
            },
            fold(){
                if(this.isDragging){
                    let divs=document.querySelectorAll('.prompt-li');
                    for(let i in divs){
                        try{divs[i].classList.remove('dragging')}catch(e){}
                    }
                    this.isDragging = false;
                }else{
                    let divs=document.querySelectorAll('.prompt-li');
                    for(let i in divs){
                        try{divs[i].classList.add('dragging')}catch(e){}
                    }
                    this.isDragging = true;
                }
            }
        }
    }
</script>